• Your name
• Declare/discuss any aspects of your client or server code that are not
working. What are your intuitions about why things are not working?
What issues you already tried and ruled out? Given more time, what
would you try next? Detailed answers here are critical to getting partial
credit for malfunctioning programs.
• In a few sentences, describe how you tested that your code was working.
• What was the most challenging aspect of this assignment, and why?

Lai Yan Yung
My client didn't use the same recv func that inside the helper file sandr.py.
It doesn't really recv(2) concurrently in client. But it does work in server. 
For the server, it has problem on figuring out which client has left and removed
the client from the list, as in python when a client left, the server will receive
a empty byte b''. So now when a client exit, the server will keep receving b''.
Which is same as None for the recv function, so I have problem on letting the 
server know that the client has left or is just still receiving message.I 
finally got the idea of recv(2) on the last day. So I have make wrote a recv 
function which only contain one recv(2) and will concurrently recv using select.
If I have more time I will fixed the client code on using the recv function.
I also think that the time out method that I am using right now on client may not
be capable if I need to use the same recv function. As now my client part for 
entering username is outside select.So now my client is entering name in an if 
statement but it wont work concurrently, so if i use the new recv function,
I then need to use a lot of while loop based on the code that now I have, which 
is not good. 

I open serveral clients and tried to connect them to the server, sent private 
message and public. Also exit by typing exit() and ctrl c. Also wait 60s and see
client will exit or not after the time out.

I think the most challenging part is the recv(2), as it takes me time to truely
understand the concept of it. And the same function need to work for both client
and server. Also it can only have one recv(2) and cannot use any blocking function
so it is not easy to do. The whole concept is relying on select, so when there is 
event, will trigger the recv process. Also need to use dictionary to keep track 
on the receiving. 